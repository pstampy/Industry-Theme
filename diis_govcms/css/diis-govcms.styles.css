@charset "UTF-8";
/**
 * Map of predefined constants
 */
/** 
 * Layouts map
 */
/**
 * Set up layout-relevant globals
 */
/**
 * Sets a value in an existing map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key the value will be set for.
 * @param {Misc}    $value Value to be set.
 */
/**
 * Merges to SASS maps recursively
 * @param  {Map}  $map1 Map to be merged into.
 * @param  {Map}  $map2 Map to be merged into $map1.
 * @return {Map}        Merged map.
 */
/**
 * Implodes a list separating list items by $separator.
 * @param  {List}    $list                  Sass list of misc items.
 * @param  {String}  $separator: ''         Separator string.
 * @param  {Boolean} $recursive: false      Optionally implode items of type list.
 * @return {String}                         Imploded list as string.
 */
/**
 * Removes nth value from a list
 * @param  {List} $list       List the value is to be removed from.
 * @param  {Integer} $index   Index of the value to be removed.
 * @return {List|Boolean}     New list with value removed or false, if operation failed.
 */
/**
 * Defines a new constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name  Name of new constant.
 * @param  {Misc}   $value Value of constant
 */
/**
 * Retrieves value of a constant.
 * Based on code by Hugo Giraudel, http://www.sitepoint.com/dealing-constants-sass/
 * @param  {String} $name Name of constant.
 * @return {Misc}         Value of constant.
 */
/**
 * Sets a value in $CACHE map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key the value will be set for.
 * @param {Misc}    $value Value to be set.
 */
/**
 * Returns a value for a $key from $CACHE map
 * @param  {String} $key            Key of the value to be retreived.
 * @return {Misc}                   Value or false if there’s no value or $key.
 */
/**
 * Sets a value on $CACHE map for $key
 * @param {String}              $key        Key for which the value is to be set.
 * @param {misc}                $vakue      Value to be set for $key.
 */
/**
 * Pushs a value to a list in $CACHE map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key the value will be set for.
 * @param {Misc}    $value Value to be pushed.
 * @return {map}    Merged map
 */
/**
 * Pushs a value to a list on $CACHE map for $key
 * @param {String}              $key        Key of the list to which the value is to be pushed.
 * @param {misc}                $vakue      Value to be pushed.
 */
/**
 * Prepends a value to a list in $CACHE map.
 * @param {Map}     $map   Map the value will be set in.
 * @param {String}  $key   Key of the list the value will be prepended to.
 * @param {Misc}    $value Value to be prepended.
 * @return {map}    Merged map
 */
/**
 * Prepends a value to a list on $CACHE map for $key
 * @param {String}              $key        Key of the list to which the value is to be prepended.
 * @param {misc}                $vakue      Value to be prepended.
 */
/**
 * Returns the nth value from a list at $key from $CACHE map
 * @param  {String} $key            Key of the list the value is to be retreived from.
 * @param  {Integer} $index         Index of the value to be retreived.
 * @return {Misc}                   Value or false if there’s no value at $index.
 */
/**
 * Removes last value from a list at $key on $CACHE map and returns it
 * @param  {String} $key            Key of the list on $CACHE map.
 * @return {Misc}                   Removed value.
 */
/**
 * Removes first value from a list at $key on $CACHE map and returns it
 * @param  {String} $key            Key of the list on $CACHE map.
 * @return {Misc}                   Removed value.
 */
/**
 * Calculates a relative em value from $px relatively to $px-context.
 * @param  {px value} $px         Value.
 * @param  {px value} $px-context Context.
 * @return {em value}             Relative em value.
 */
/**
 * Calculates the percentage value of $px relatively to $px-context.
 * @param  {px value} $px          Part.
 * @param  {px value} $px-context  Context.
 * @return {% value}               Percentage value.
 */
/**
 * Returns rem value for $px relative to constan root font size.
 * @param  {px value}  $px Absolute pixel value.
 * @return {rem value}     Rem value relative to root font size.
 */
/**
 * Converts all px values in $list to em values based on $context.
 * @param  {List} $list   List of values.
 * @return {List}         List of modified values.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Sets one or multiple tone values for a color palette.
 * @param {String}              $palette        Name of color palette.
 * @param {String|Map}          $tone           Name of tone or–if no $value is given–map of tone-value pairs.
 * @param {Color value|Boolean} $value: false   Color value to be set for $tone.
 */
/**
 * Returns a color value for a $tone from a defined $palette.
 * @param  {String} $palette         Name of palette.
 * @param  {String} $tone:   'base'  Name of tone, default to `base`.
 * @return {Misc}                    Color value.
 */
/**
 * Sets a base value and creates new absolute typographic context based on rem values.
 * @param  {px value}           $new-font-size                     Font size value, default is global $base__font-size.
 * @param  {px value|Boolean}   $new-line-height: 1.25*$new-font-size  Line height value, default is global $base__font-size
 * @param  {Booelan}            $set-styles:  true             Pass false to just switch type context without settings styles.
 */
/**
 * Changes the local type context without touching type base.
 * @param  {px value}         $new-font-size                         Font size value.
 * @param  {px value|Boolean} $new-line-height: 1.25*$new-font-size  Line height value, defaults to 1.25 times font size value.
 * @param  {Boolean}          $set-styles:  true                     Pass false to just switch type context without setting styles.
 */
/**
 * Sets up layouts from map, initiates default layout, sets globals.
 * @param  {Map}    $layouts Map of layout definitions
 */
/**
 * Implements settings for layout defined by $layout-key locally for @content. Wraps @content in a media query if `breakpoint` settings are present in layout definition.
 * @param  {String} $layout-key: default       Layout key of layout which’s settings to be used as context for @content. Can contain modifiers like `up` or `down` to only use min- or max-values of breakpoints.
 */
/**
 * Builds layout map by extending the layout defined in $this-layout accordingly to inheritence defined through `extends` setting or a particular layout defined through $with-layout parameter.
 * @param  {String} $this-layout                      Key of the layout to be extended.
 * @param  {String|Boolean} $with-layout:   false     Optional layout key to be extended with $this-layout
 * @return {Map|Boolean}                              Returns map of extended layout or false, if a layout couldn’t be correctly retrieved from $LAYOUTS.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 * @return {Map}                            Returns extended layout map for $layout-key.
 */
/**
 * Extends layout with map $extension.
 * @param  {Map}    $extension              Map with additional layout settings.
 * @param  {String} $layout-key: 'default'  Key of layout to be retrieved and returned after extension.
 */
/**
 * Retrieves a particular value from a group or a complete group or whole config from current or specified layout
 * @param  {String|Boolean} $group:     false         Group of settings to be retrieved. Set to `false` for all groups of a layout.
 * @param  {String|Boolean} $key:       false         Specifies particular setting to be retrieved. Set to `false` for all settings of a group.
 * @param  {String|Boolean} $of-layout: false         Defines layout settings will be retrieved from. Set to `false` to retrieve from current layout.
 * @return {CSS value|Map|Boolean}                    Returns a particular setting’s value, a map of settings, a layout map or false if requested resource doesn’t exist.
 */
button, .l-top-menu-wrapper .menu a, .pager .pager-previous a,
.pager .pager-next a, [type='button'], [type='reset'], [type='submit'] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none;
  background-color: #718CC7;
  border: 0;
  border-radius: 3px;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-family: "Gotham A", "Gotham B", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 1em;
  -webkit-font-smoothing: antialiased;
  font-weight: 600;
  line-height: 1;
  padding: 0.75em 1.5em;
  text-decoration: none;
  transition: background-color 150ms ease;
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  vertical-align: middle;
  white-space: nowrap; }
  button:hover, .l-top-menu-wrapper .menu a:hover, .pager .pager-previous a:hover,
  .pager .pager-next a:hover, button:focus, .l-top-menu-wrapper .menu a:focus, .pager .pager-previous a:focus,
  .pager .pager-next a:focus, [type='button']:hover, [type='button']:focus, [type='reset']:hover, [type='reset']:focus, [type='submit']:hover, [type='submit']:focus {
    background-color: #5a709f;
    color: #fff; }
  button:disabled, .l-top-menu-wrapper .menu a:disabled, .pager .pager-previous a:disabled,
  .pager .pager-next a:disabled, [type='button']:disabled, [type='reset']:disabled, [type='submit']:disabled {
    cursor: not-allowed;
    opacity: 0.5; }
    button:disabled:hover, .l-top-menu-wrapper .menu a:disabled:hover, .pager .pager-previous a:disabled:hover,
    .pager .pager-next a:disabled:hover, [type='button']:disabled:hover, [type='reset']:disabled:hover, [type='submit']:disabled:hover {
      background-color: #718CC7; }

fieldset {
  background-color: transparent;
  border: 0;
  margin: 0;
  padding: 0; }

legend {
  font-weight: 600;
  margin-bottom: 0.375em;
  padding: 0; }

label {
  display: block;
  font-weight: 600;
  margin-bottom: 0.375em; }

input,
select,
textarea {
  display: block;
  font-family: "Gotham A", "Gotham B", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 1em; }

[type='color'], [type='date'], [type='datetime'], [type='datetime-local'], [type='email'], [type='month'], [type='number'], [type='password'], [type='search'], [type='tel'], [type='text'], [type='time'], [type='url'], [type='week'], input:not([type]), textarea,
select[multiple] {
  background-color: #fff;
  border: 1px solid #F0F0F0;
  border-radius: 3px;
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06);
  box-sizing: border-box;
  margin-bottom: 0.75em;
  padding: 0.5em;
  transition: border-color 150ms ease;
  width: 100%; }
  [type='color']:hover, [type='date']:hover, [type='datetime']:hover, [type='datetime-local']:hover, [type='email']:hover, [type='month']:hover, [type='number']:hover, [type='password']:hover, [type='search']:hover, [type='tel']:hover, [type='text']:hover, [type='time']:hover, [type='url']:hover, [type='week']:hover, input:not([type]):hover, textarea:hover,
  select[multiple]:hover {
    border-color: silver; }
  [type='color']:focus, [type='date']:focus, [type='datetime']:focus, [type='datetime-local']:focus, [type='email']:focus, [type='month']:focus, [type='number']:focus, [type='password']:focus, [type='search']:focus, [type='tel']:focus, [type='text']:focus, [type='time']:focus, [type='url']:focus, [type='week']:focus, input:not([type]):focus, textarea:focus,
  select[multiple]:focus {
    border-color: #718CC7;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.06), 0 0 5px rgba(95, 125, 192, 0.7);
    outline: none; }
  [type='color']:disabled, [type='date']:disabled, [type='datetime']:disabled, [type='datetime-local']:disabled, [type='email']:disabled, [type='month']:disabled, [type='number']:disabled, [type='password']:disabled, [type='search']:disabled, [type='tel']:disabled, [type='text']:disabled, [type='time']:disabled, [type='url']:disabled, [type='week']:disabled, input:not([type]):disabled, textarea:disabled,
  select[multiple]:disabled {
    background-color: #f2f2f2;
    cursor: not-allowed; }
    [type='color']:disabled:hover, [type='date']:disabled:hover, [type='datetime']:disabled:hover, [type='datetime-local']:disabled:hover, [type='email']:disabled:hover, [type='month']:disabled:hover, [type='number']:disabled:hover, [type='password']:disabled:hover, [type='search']:disabled:hover, [type='tel']:disabled:hover, [type='text']:disabled:hover, [type='time']:disabled:hover, [type='url']:disabled:hover, [type='week']:disabled:hover, input:not([type]):disabled:hover, textarea:disabled:hover,
    select[multiple]:disabled:hover {
      border: 1px solid #F0F0F0; }
  [type='color']:-ms-input-placeholder, [type='date']:-ms-input-placeholder, [type='datetime']:-ms-input-placeholder, [type='datetime-local']:-ms-input-placeholder, [type='email']:-ms-input-placeholder, [type='month']:-ms-input-placeholder, [type='number']:-ms-input-placeholder, [type='password']:-ms-input-placeholder, [type='search']:-ms-input-placeholder, [type='tel']:-ms-input-placeholder, [type='text']:-ms-input-placeholder, [type='time']:-ms-input-placeholder, [type='url']:-ms-input-placeholder, [type='week']:-ms-input-placeholder, input:not([type]):-ms-input-placeholder, textarea:-ms-input-placeholder,
  select[multiple]:-ms-input-placeholder {
    color: #CFC3C3; }
  [type='color']::placeholder, [type='date']::placeholder, [type='datetime']::placeholder, [type='datetime-local']::placeholder, [type='email']::placeholder, [type='month']::placeholder, [type='number']::placeholder, [type='password']::placeholder, [type='search']::placeholder, [type='tel']::placeholder, [type='text']::placeholder, [type='time']::placeholder, [type='url']::placeholder, [type='week']::placeholder, input:not([type])::placeholder, textarea::placeholder,
  select[multiple]::placeholder {
    color: #CFC3C3; }

textarea {
  resize: vertical; }

[type="search"] {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }

[type="checkbox"],
[type="radio"] {
  display: inline;
  margin-right: 0.375em; }

[type="file"] {
  margin-bottom: 0.75em;
  width: 100%; }

select {
  margin-bottom: 0.75em;
  max-width: 100%;
  width: auto; }

ul,
ol,
.menu .leaf {
  list-style: none;
  margin: 0;
  padding: 0; }

.l-content ul {
  list-style: disc;
  margin: 0 0 1.5em 2em; }

dl {
  margin: 0; }

dt {
  font-weight: 600;
  margin: 0; }

dd {
  margin: 0; }

figure {
  margin: 0; }

img,
picture {
  margin: 0;
  max-width: 100%;
  height: auto; }

table {
  border-collapse: collapse;
  margin: 0.75em;
  table-layout: fixed;
  width: 100%; }

th {
  border-bottom: 1px solid #b4b4b4;
  font-weight: 600;
  padding: 0.75em;
  text-align: left; }

td {
  border-bottom: 1px solid #F0F0F0;
  padding: 0.75em; }

tr,
td,
th {
  vertical-align: middle; }

body {
  color: #333;
  font-family: "Gotham A", "Gotham B", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  font-size: 1em;
  line-height: 1.5;
  font-weight: 300; }

h2 {
  font-size: 1.57352em; }

h3 {
  font-size: 1.40493em; }

h4 {
  font-size: 1.2544em; }

h5 {
  font-size: 1.12em; }

h6 {
  font-size: 1em; }

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: "Gotham A", "Gotham B", "Helvetica Neue", "Helvetica", "Arial", sans-serif;
  line-height: 1.2;
  margin: 0 0 0.75em;
  font-weight: 600; }

h1 {
  font-size: 1.3em;
  margin: 0; }

p {
  margin: 0 0 0.75em; }

a {
  color: #718CC7;
  text-decoration: none;
  transition: color 150ms ease; }
  a:active, a:focus, a:hover {
    color: #556995; }
    .l-content a:active, .l-content a:focus, .l-content a:hover {
      text-decoration: underline; }

em {
  font-style: italic; }

strong {
  font-weight: 600; }

hr {
  border-bottom: 1px solid #F0F0F0;
  border-left: 0;
  border-right: 0;
  border-top: 0;
  margin: 1.5em 0; }

sup, sub {
  vertical-align: baseline;
  position: relative;
  top: -0.4em;
  font-size: 0.8em; }

sub {
  top: 0.4em; }

ol {
  list-style: decimal;
  margin-left: 1.5em;
  margin-bottom: 1.5em; }
  ol li {
    padding-left: 0.75em;
    margin-bottom: 0.75em; }

.l-header {
  margin-bottom: 0.75em; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-top-menu-wrapper {
  background-color: #718CC7;
  margin-bottom: 0.75em; }
  .l-top-menu-wrapper .menu {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -ms-flex-pack: distribute;
        justify-content: space-around; }
    .l-top-menu-wrapper .menu li {
      -ms-flex: 0 0 auto;
          flex: 0 0 auto; }
    .l-top-menu-wrapper .menu a {
      color: white;
      font-size: 80%; }
      .l-top-menu-wrapper .menu a:hover {
        color: #718CC7;
        background-color: white; }
  .l-top-menu-wrapper .menu-wrapper {
    padding: 0.375em; }
    .l-top-menu-wrapper .menu-wrapper.left {
      border-bottom: 1px solid white; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-branding {
  margin: 0.75em 0.75em 0 0.75em;
  padding: 0.75em 0.75em 0 0.75em; }
  .l-branding .front,
  .l-branding .active {
    display: block;
    height: 100%;
    margin: 0 auto;
    width: auto;
    text-align: center; }
  .l-branding .view-empty {
    margin-bottom: 1.5em;
    padding-bottom: 1.5em; }

.page-taxonomy-term .l-branding {
  margin-top: 0;
  padding-top: 0; }

.header-image {
  margin-bottom: 0.75em; }

.branding-text {
  text-align: center; }

.header-text a {
  color: #000000; }

.header-text .subheading {
  display: block;
  font-size: 0.9em;
  font-weight: 300;
  padding-top: 0.75em;
  margin-bottom: 0.75em; }
  .header-text .subheading p {
    margin: 0; }

.branding-image a {
  line-height: 0;
  display: block; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-main-menu-wrapper {
  padding-top: 0.75em; }
  .l-main-menu-wrapper .menu {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -ms-flex-pack: center;
        justify-content: center; }
    .l-main-menu-wrapper .menu li {
      -ms-flex: 0 0 auto;
          flex: 0 0 auto; }
      .l-main-menu-wrapper .menu li a {
        display: block;
        padding: 0.375em 0.75em;
        margin: 1px;
        transition: all 150ms ease;
        border-radius: 3px; }
        .l-main-menu-wrapper .menu li a:hover {
          color: white;
          background-color: #718CC7; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-search-wrapper {
  margin: 0.75em; }
  .l-search-wrapper .container-inline {
    display: -ms-flexbox;
    display: flex; }
    .l-search-wrapper .container-inline .form-type-textfield {
      margin: 0 0.75em 0 0;
      -ms-flex: 1 0 auto;
          flex: 1 0 auto; }
      .l-search-wrapper .container-inline .form-type-textfield input {
        margin: 0;
        height: 100%;
        border: 1px solid #CFC3C3;
        padding: 0.6em; }
    .l-search-wrapper .container-inline .form-actions {
      -ms-flex: 0 0 auto;
          flex: 0 0 auto; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-header-bottom {
  background-color: #F0F0F0;
  border-top: 1px solid #CFC3C3;
  border-bottom: 1px solid #CFC3C3; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.tabs--primary {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: center;
      justify-content: center;
  background-color: #F0F0F0;
  list-style: none !important;
  margin: 0 !important; }
  .tabs--primary li {
    text-align: center;
    margin: 0;
    -ms-flex: 1 1 auto;
        flex: 1 1 auto; }
  .tabs--primary .active {
    font-weight: bold; }

.pane-ministers {
  padding: 0.75em; }
  .pane-ministers .view-content {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    -ms-flex-pack: justify;
        justify-content: space-between; }
  .pane-ministers .minister {
    margin: 0.375em;
    -ms-flex: 0 0 100%;
        flex: 0 0 100%; }
    .pane-ministers .minister img {
      display: block;
      margin: 0.75em auto;
      height: auto;
      border: 1px solid #CFC3C3; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.pane-content-items {
  padding: 0.75em; }
  .pane-content-items .date-display-single {
    font-style: italic; }
  .pane-content-items .item {
    margin-bottom: 0.75em; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.pager {
  list-style: none !important;
  margin: 0 0 0.75em 0 !important;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: nowrap;
      flex-wrap: nowrap;
  -ms-flex-pack: center;
      justify-content: center; }
  .pager .pager-previous a,
  .pager .pager-next a {
    margin: 0 0.375em; }
    .pager .pager-previous a:hover,
    .pager .pager-next a:hover {
      color: white;
      background-color: #718CC7; }
  .pager .pager-current {
    padding: 0.75em 1.5em;
    line-height: 1;
    font-weight: bold;
    margin: 0 0.375em; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.content-wrapper {
  padding: 0.75em; }
  .content-wrapper .pane-content-items {
    padding: 0; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.easy-breadcrumb {
  margin-bottom: 0.75em; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.sidebar-right {
  background-color: #F0F0F0;
  padding: 0.75em;
  border-radius: 3px; }
  .sidebar-right h2 {
    font-size: 1.2em; }
  .sidebar-right h3 {
    font-size: 1.1em; }
  .sidebar-right ul {
    list-style: none;
    margin: 0;
    padding: 0; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.pane-ministers-panel-pane-1 {
  margin-bottom: 0.75em; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.page-user .l-content {
  padding: 0.75em; }

@media all and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.l-footer {
  background-color: #005677;
  font-size: 85%;
  color: white; }

.l-footer-menu-wrapper {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-pack: start;
      justify-content: flex-start;
  background-color: #333;
  padding: 0.75em;
  color: white; }
  .l-footer-menu-wrapper a {
    color: white; }
    .l-footer-menu-wrapper a:hover {
      text-decoration: underline; }
  .l-footer-menu-wrapper > nav, .l-footer-menu-wrapper > div {
    margin-bottom: 0.75em; }

.footer-block {
  -ms-flex: 0 0 100%;
      flex: 0 0 100%;
  padding-right: 1.5em; }
  .footer-block h2 {
    font-size: 1.2em; }
  .footer-block li {
    margin-bottom: 0.375em; }

.l-copyright {
  background-color: #F0F0F0; }
  .l-copyright .block__content {
    padding: 0.75em;
    text-align: center; }
  .l-copyright p {
    margin: 0; }

.rap p {
  text-align: center;
  padding: 0.75em;
  font-size: 90%; }

@media all and (min-width: 50.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

/*@include layout-use(L up) {
    @include type-base($base__font-size, $base__line-height);
    @include breakpoint;
  
	.l-footer {
		@include bleed;
	}
	.l-footer-menu-wrapper {
	}
	.footer-block {
		flex: 0 0 22.5%;
	}
	.l-copyright {
		@include bleed;
	}
}*/
@media all and (max-width: 75em) and (min-width: 75.0625em) {
  /*  @include with-layout($susy) {
          @content;
        }*/ }

.search-form {
  margin: 0 0 1.5em 0; }
  .search-form .container-inline {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: end;
        align-items: flex-end; }
    .search-form .container-inline .form-type-textfield {
      margin: 0 0.75em 0 0;
      width: 100%; }
      .search-form .container-inline .form-type-textfield label {
        -ms-flex-preferred-size: 100%;
            flex-basis: 100%; }
      .search-form .container-inline .form-type-textfield input {
        height: 100%;
        border: 1px solid #CFC3C3;
        padding: 0.6em;
        -ms-flex: 1 0 auto;
            flex: 1 0 auto;
        margin: 0 0.75em 0 0; }
    .search-form .container-inline .form-submit {
      -ms-flex: 0 1 auto;
          flex: 0 1 auto; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
